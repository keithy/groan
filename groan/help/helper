#!/bin/bash

#Provide some basic features and
#Redirect groan <cmd> to groan.<cmd>.cmd.sh

#constants
configLocationsFileName="config-locations.source"

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'
shopt -s nullglob # make sure globs are empty arrays if nothing is foound

# our contribution to help
commonOptions="common options:
--help    | -h | -?  Usage help for a command
--quiet   | -q       Quiet mode - say nothing
--verbose | -V       Verbose
--debug   | -d | -D  Debug - tell all
--dry-run            # default
--confirm            # not a dry run - perform action"

#default flags
DEBUG=false
VERBOSE=false
LOUD=true
DRYRUN=true
CONFIRM=false
SHOWHELP=false #exec command and only display the help metadata
METADATAONLY=false #exec command only as far as the help metadata

#search through the arguments for the command and flags
args=()
command=""
for arg in "$@"
do
	case "$arg" in
	  --debug | -d | -D)
	    	DEBUG=true
	    	VERBOSE=true
	    	LOUD=true
	    ;;
	  --help | -h | "-?")
	  		SHOWHELP=true
	  		METADATAONLY=true
	    ;;
	  --verbose | --v | -v | -V )
	    	DEBUG=false
	    	VERBOSE=true
	    	LOUD=true
	   ;;
	   --quiet | -q)
	    	LOUD=false
	    	DEBUG=false
	    	VERBOSE=false
	    ;;
	    --dry-run | -dry | --dry)
	    	DRYRUN=true
	    	CONFIRM=false
	    ;;
	    --confirm)
	    	DRYRUN=false
	    	CONFIRM=true
	    ;;
	    *)
		if [[ "$command" = "" ]]; then
		   command=$arg
		else
		   args+=($arg)
		fi
	    ;;
	esac
	shift
done

#find platform

MACOSX=false
WINDOWS=false
UNIX=false
system=$(uname)

if [[  -d "/System/Library/Frameworks" ]] ; then
	MACOSX=true
elif [ -d "/WINDOWS" ] ; then
	WINDOWS=true
else
	UNIX=true
fi

#find the $scriptFile and importantly the $scriptDir
scriptFile="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
if [ -L "$scriptFile" ]; then
	scriptFile=`readlink -n $scriptFile`
fi
scriptName=${scriptFile##*/} # `basename $scriptFile` 
breadcrumbs=("$scriptName")
breadcrumbsStr=${breadcrumbs[*]// /|}
scriptDir=${scriptFile%/*} # `dirname $scriptFile`
configLocationsFile="$scriptDir/$configLocationsFileName"
workingDir=$(pwd)
searchablePath=":$PATH:"

if $DEBUG; then
	echo "scriptName: '$scriptName'"
	echo "scriptFile: $scriptFile"
	echo "scriptDir: $scriptDir"
    echo "workingDir: $workingDir" 		
    echo "configLocationsFile: $configLocationsFile"
    echo "Command requested: '$command'"
fi

# handle the default empty case

# no command provided default to subcommmand help --help
if [[ "$command" = "" ]]; then
	command="help"
	SHOWHELP=true
	METADATAONLY=true
fi

source "$configLocationsFile"

# Check for Markdown Viewer
[[ -z $(which ${markdownViewerUtility%% *}) ]] && markdownViewerUtility="cat"
$DEBUG && echo "Markdown viewer: $markdownViewerUtility"

for configFile in ${configFileLocations[@]}
do
	$DEBUG && echo "Looked for config in: $configFile"
	if [[ -f $configFile ]]; then
		$VERBOSE && echo "Reading configuration: $configFile"
		source "$configFile"
		break
	fi
done

dispatchLocations=("${locations[@]}")   

####source "commands/dispatch-command.sh"
# dispatcher for commands

selfLocation="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
$DEBUG && echo "dispatching-command: $scriptName selfLocation: $selfLocation"

target="${command}*.cmd.*"
exact="${command}.cmd.*"

count=0
previous=""
for loc in ${dispatchLocations[@]} 
do
	[[ "$previous" == "$loc" ]] && continue
	previous="$loc"
	
	$DEBUG && echo "Looking for $target in: $loc"

	# if an exact match is available - upgrade the target to prioritise the exact match
	for found in $loc/$exact
	do
		target=$exact
	done

	for found in $loc/$target
	do
		count=$((count + 1))	
		$DEBUG && echo "Found #$count : $found"
	done

	if [ $count -gt 1 ]; then
		$LOUD && echo "Warning: Command '$command' is ambiguous (use --debug for more info)"
		exit
	fi

	arg_str="${args[@]:+${args[@]}}" # needed bash<=4.1 when set -u is on
	
	subcommandsLocation="$loc"
	
	for found in $loc/$target
	do
		case ${found##*.} in
			sh)
				$DEBUG && echo "Running source: $found $arg_str"
				source "$found" "${args[@]:+${args[@]}}"
				exit 0
			;;
			exec)
				$DEBUG && echo "Running exec: $found $arg_str"
				exec "$found" "${args[@]:+${args[@]}}"
				exit 0
			;;
			*)
				$DEBUG && echo "Extracting metadata from: $found"
				$DEBUG && sed -n 's|^#m# \(.*\)$|\1|p' "$found"
				
				#evaluate meta-data first
				eval "$(sed -n 's|^#m# \(.*\)$|\1|p' $found)"
				
				$DEBUG && echo "Running eval: $found $arg_str"				
				eval "$found" "${args[@]:+${args[@]}}"
			    exit 0
			;;
		esac
		exit
	done
done

$LOUD && echo "Warning: $scriptName $command : command  not found"
exit 1

# "This Code is distributed subject to the MIT License, as in http://www.opensource.org/licenses/mit-license.php . 
# Any additional contribution submitted for incorporation into or for distribution with this file shall be presumed
# subject to the same license."

