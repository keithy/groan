#!/usr/bin/env bash
##############################################################
# The groan framework is implemented by three scripts.
#
# 1) This "Command" script 
#    - provides universal features and passes to a dispatcher
# 2) commands/_dispatch.sh
#    - selects and executes a given sub-command
# 3) <name>.sub.<cmd>.cmd.<altname>.sub.sh 
#    - alias a command delegating to anothers sub-command.
#
# Shell sub-commands may be sourced for two purposes, 
# selected by the METADATAONLY flag.
#

##############################################################
# Default metadata - our contribution to help
#

options_common_vertical="
--help            | -H   usage help for a command
--quiet           | -Q   quiet mode - say nothing
--verbose         | -V   verbose
--debug           | -D   debug - tell all
--dry-run         | -N
--confirm         | -Y   not a dry run - perform action
--config=<choice> | -C=  select alternative configuration
"

options_common_horizontal=\
"
--help --quiet --verbose --debug
 -H     -Q      -V        -D
"

description_=""
options_=""
usage_=""

##############################################################
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
# Unofficial "Bash Strict Mode"
#
set -euo pipefail
IFS=$'\n\t'
shopt -s nullglob # make sure globs are empty arrays if nothing is found
shopt -s globstar
set -o allexport
NL=$'\n' # Just useful

##############################################################
# Everyfile in the toolset traditionally calls this function
#
function me() #BASH_SOURCE
{
  $DEBUG && printf "\e[2m${1}\e[0m\n"
  my_source=$(realpath "${1}")
  my_name="${my_source##*/}"
  my_dir="${my_source%/*}"
}

function my_name()
{
  echo $g_tool_context_name
}
 
##############################################################
# A standard means for platform differentiation
g_PLATFORM="${BASH_VERSINFO[5]}"

##############################################################
# Utility to ensure that sudo is available
#
function g_needsSudo() {
    local prompt
    prompt=$(sudo -nv 2>&1)
    if [ $? -eq 0 ]; then
       $DEBUG && echo "User has 'sudo' access."
    elif echo "$prompt" | grep -q '^sudo:'; then
       $DEBUG && echo "User has sudo (password required)"
    else
       echo "this action requires 'sudo' access."
       exit 1
    fi
}

#(initialized once)
#1) this command directory
function g_readDefaults()  
{ 
  local c_dir="${1}"
  g_tmp=/tmp # TempDir for Linux ... or Windows
  [[ "$g_PLATFORM" == *pc-msys ]] && g_tmp="$HOME/AppData/Local/Temp"

  # config locations 
  g_config_options=("local" "user" "context" "global")
  g_config_file_locations=(
    "$(pwd)"  	             # --local
    "$HOME/.config/$g_name" # --user
    "${c_dir}/../config"    # --context
    "${c_dir}/config"  	  # --global
  )

  g_default_subcommand="_default" #default
  g_default_dispatch="_dispatch.sh"

  CONFIG=${CONFIG:-default}

  markdownViewerUtility="mdv -t 715.1331" # miscellaneous
}

##############################################################
# Locations are the top level configuration for an executable
# they set where to find everything else, including config
# defaults are set here, and each executable may have a
# <exe>.conf or a hidden .<exe>.conf
#
function g_readLocations # from g_locations conf file
{
  #c_dir c_name globals used within <name>.conf file
  c_file="$1"
  c_dir=$(dirname "$c_file")
  c_name="${c_file##*/}" # `basename $c_file`

  g_locations=(
	  "${c_dir}/commands"                
	  "${c_dir}/help"                  
  )
  
  # If present read our personal locations file 
  g_find_ "Locations" "${c_name}.conf" "${c_dir}" && source "$g_found"
  # in preference to a hidden personal locations file
  g_find_ "Locations" ".${c_name}.conf" "${c_dir}" && source "$g_found"

  return 0
}

##############################################################
# search g_config_file_locations set in g_readLocations
# find a <filename>
#
function g_find_ () #1) type_string #2) filename #) dirs to look
{
  local dir file type="${1}" name="${2}" ; shift ; shift
  local -a places=("$@")
	for dir in "${places[@]:-${g_config_file_locations[@]}}"
    do
       g_found="${dir}/${name}"
       if [[ -f "${g_found}" ]]; then
          $DEBUG && echo "${type}< ${g_found}"
          return 0
       fi
       $DEBUG && echo "${type}? ${g_found}"
    done
    return 1 # no file found
}

##############################################################
#
function define(){ IFS='\n' read -r -d '' ${1} || true; }

##############################################################
# on the tin
function parse_yaml {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$'\034'
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

##############################################################
#
function g_executeScriptPath {

  s_path="$1"
  local s_meta_path="${s_path/.sub.*/.conf}"

  local meta_complete title="Running"
  $METADATAONLY && title="Metadata<"

  if [[ -f "$s_meta_path" ]]; then
        $DEBUG && echo "Metadata< $s_meta_path"
        source "$s_meta_path" "${args[@]:+${args[@]}}" && meta_complete=true || meta_complete=false
        $METADATAONLY && $meta_complete && return 0
  fi

  # When set -u is enabled bash<=4.1, this pattern
  # is needed: "${args[@]:+${args[@]}}" 
  
  case "${s_path##*.}" in
    sh)
        $DEBUG && echo "$title source> $s_path ${args[@]:+${args[@]}}"
        
        $XDEBUG && set -x
        g_sourceScriptMappingArgs "${args[@]:+${args[@]}}"
        if $XDEBUG; then set +x; fi #short && form does not agree with a following return
        return
    ;;
    exec)
        $DEBUG && echo "$title exec> $s_path ${args[@]:+${args[@]}}"
        exec "$s_path" "${args[@]:+${args[@]}}"
        return
    ;;
    ps1)
        $DEBUG && echo "$title exec> $s_path ${args[@]:+${args[@]}}"
        exec powershell.exe -NoProfile -ExecutionPolicy Bypass -File "$s_path" "${args[@]:+${args[@]}}"
        return
    ;; 
    su)
        $DEBUG && echo "$title exec> $s_path ${args[@]:+${args[@]}}"
        sudo "$s_path" "${args[@]:+${args[@]}}"
        return
    ;;
    *)
        $DEBUG && echo "$title eval> $s_path ${args[@]:+${args[@]}}"
        eval "$s_path" "${args[@]:+${args[@]}}"
        exit 0
    ;;
  esac
}

##############################################################
# Sourcing a script is done via this function
# so that args are automatically mapped in to $@
function g_sourceScriptMappingArgs
{
    source "$s_path"
}

##############################################################
#
# If description is not defined - no help is displayed.
#
# Help is in three parts: description, options, usage
# Each has a main and supplementary
#   - $description and $description_
#   - $options     and $options_
#   - $usage       and $usage_
#
# Description - is displayed with the first line in bold
# Options - section titled in bold 'options:'
# Usage   - section titled in bold 'usage:'
# 
function g_displayHelp {

  [[ -z ${description+x} ]] && echo "command description is missing" && return 1

  local desc="$description${NL}"
  local title="${desc%%$'\n'*}" # first line

  printf "${bold}%s${reset}\n%s\n" "${title}" "${desc#*$'\n'}"
  [[ -n ${description_} ]] && printf "$description_\n\n"

  if [[ -z ${options+x} ]]; then
    printf "${bold}options:${reset}%s" "${options_common_vertical}"
  else
    printf "${bold}options:${reset}%s%s" "${options_common_horizontal}" "$options"  
  fi
  [[ -n ${options_+x} ]] && printf "%s" "${options_#*$'\n'}"
  
  printf "\n${bold}usage:${reset}${usage}"
  [[ -n ${usage_} ]] && printf "${usage_}"
  
  return 0
}

g_option_vars=()
function g_declare_options ()
{
  g_option_vars+=( "$@" )
  for var in "$@"; do
    declare -g $var=false
  done
}

##############################################################
#
g_join_into() {
    # $1 is return variable name
    # $2 is sep
    # $3... are the elements to join
    local retname=$1 sep=$2 ret=${3:-}
    shift 3 || shift $(($#))
    printf -v "$retname" "%s" "$ret${@/#/$sep}"
}


##############################################################
#
g_split_into() {
    # $1 is return array variable name
    # $2 is sep
    IFS="$2" read -r -a "$1" <<< "$3"
}

##############################################################
#
function g_on_EXIT_ ()
{
  printf "on EXIT functions: "
  declare -F | awk 'sub(/.*g_on_EXIT_/,"")' | xargs printf "%s, "  
}

function g_on_EXIT_groan ()
{
  env | grep -E "^[a-z]_"
}

function g_on_EXIT_options ()
{
  local vars
  g_join_into vars '|' "${g_option_vars[@]}"
  env | grep -E "^($vars)"
}

function g_on_EXIT_my ()
{
    env | grep -E "^my_"
}

function g_on_EXIT_env ()
{
    env
}

##############################################################
#
function g_view { # Check for Markdown Viewer other wise cat
    if [[ -z $(command -v "${g_markdown_viewer%% *}") ]]; then
	    $DEBUG && echo "Markdown viewer: $g_markdown_viewer"
    
		"${g_markdown_viewer%% *}" "${g_markdown_viewer#* }" "$1"
    else
    	cat "$1"
    fi  
}

##############################################################
# Should simply be ${args[@]:1} but bash begs to differ:
#
function g_shiftArgsIntoNext {
    next=""
    local params=()
    local arg

    if [[ "${#args[@]}" -gt 0 ]]; then
            for arg in "${args[@]}"
            do 
                    if [ -z "$next" ]; then
                            next="$arg"
                    else
                            params+=("$arg")
                    fi  
            done
    fi
    args=("${params[@]:+${params[@]}}")
}
 
##############################################################
# Parsing options the groan way - first initialize all flags
#
g_declare_options METADATAONLY SHOWHELP CONFIRM DRYRUN THEME

DRYRUN=true
THEME=default

##############################################################
# Debug verbosity levels
# XDEBUG - Bash shell debugging using set -x
# DDEBUG - Developer Debug (for non-groan code)
# DEBUG -  Debug (for groan code)
g_declare_options XDEBUG DDEBUG DEBUG VERBOSE ENVIRONMENT LOUD
LOUD=true

##############################################################
# Top level - universal options processing pattern
#
args=()
c_sub_cmd=""
for arg in "$@"
do
    case "$arg" in
      -- )
        args+=( "$@" )
        break
      ;;
      ==*=*)
        arg="${arg#==}"
        declare "${arg%%=*}"="${arg#*=}"
      ;;
      -DD|--ddebug)
            DDEBUG=true
      ;;
      -XX | --set-x-enable)
            XDEBUG=true
      ;;
      --debug | -D)
            DEBUG=true
            VERBOSE=true
            LOUD=true
      ;;
      --help | -H | "-?")
            SHOWHELP=true
            METADATAONLY=true
      ;;
      --verbose | -V )
            DEBUG=false
            VERBOSE=true
            LOUD=true
       ;;
      -EXIT=* )
            trap "g_on_EXIT_${arg#-EXIT=}" EXIT
      ;;
      --quiet | -Q)
            LOUD=false
            DEBUG=false
            VERBOSE=false
      ;;
      --dry-run | -N)
            DRYRUN=true
            CONFIRM=false
      ;;
      --confirm| -Y)
            DRYRUN=false
            CONFIRM=true
      ;;
      --config=*)
            CONFIG="${arg##--config=}"
            CONFIG="${CONFIG%.conf}"
      ;;
      -C=*)
            CONFIG="${arg##-C=}"
      ;;
      --theme=*)
            THEME="${arg##--theme=}"
      ;;
      --*)
        args+=("$arg")
      ;;
      *)
          if [[ -z "$c_sub_cmd" ]]; then
             c_sub_cmd="$arg"
          else
             args+=("$arg")
          fi
      ;;
    esac
done
 
$VERBOSE && options_="
--ddebug          | -DD  developers debug switch
--set-x-enable    | -XX  enable bash debug trace
"

##############################################################
# START READING CONFIGURATION
#
me "${BASH_SOURCE}" # eat our own dog food

g_file="${my_source}"
g_dir="${my_dir}"
g_dirname="${my_dir##*/}"
g_name="${g_name:-$my_name}"

# Obsolete? (is this needed?)
#find the $c_file and importantly the $c_dir
#c_file="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
#if [ -L "$c_file" ]; then
#  c_file=$(readlink -n "$c_file")
#fi

g_readDefaults "$my_dir"
g_readLocations "$my_source"  

g_find_ Config "${CONFIG}.conf" && g_current_config="${g_found}" && source "${g_current_config}" || true

bold=$'' ; dim=$'' ; italic=$'' ; underline=$'' ; reset=$''  
g_find_ Theme themes.sh && source "${g_found}" \
    && options_common_vertical+="${NL}--theme=neon             select an alternate colour theme" \
    || true

breadcrumbs="${g_name}"

# handle the default empty case
[[ -z "$c_sub_cmd" ]] && c_sub_cmd="${c_default_subcommand:-$g_default_subcommand}"

$VERBOSE && printf "Command: ${dim}${c_dir}${reset}/${bold}${c_name}${reset}"
$VERBOSE && printf " Sub-command: ${c_sub_cmd}\n"
 
##############################################################
# Run through all of the dispatchers
#
for s_dir in "${g_locations[@]}" 
do
    g_dispatcher="$s_dir/${g_default_dispatch}"
    if [ -f "$g_dispatcher" ]; then
      source "$g_dispatcher"
    fi
done

$METADATAONLY || { $LOUD && echo "Not Found: $breadcrumbs ${bold}$c_sub_cmd${reset}" ; }

exit 1

# "This Code is distributed subject to the MIT License, as in http://www.opensource.org/licenses/mit-license.php . 
# Any additional contribution submitted for incorporation into or for distribution with this file shall be presumed
# subject to the same license."
