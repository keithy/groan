#!/bin/sh

#Provide some basic features and
#Redirect groan <cmd> to groan.<cmd>.cmd.sh

#obtain the command requested
command=$1

#shift the command from the arguments list
shift

#default flags
DEBUG=false
VERBOSE=false
LOUD=true
DRYRUN=false
SHOWHELP=false #exec command and only display the help metadata
METADATAONLY=false #exec command only as far as the help metadata

#search through the arguments for flags
for arg in $@
do
	case $arg in
	  --debug | -d | -D)
	    	DEBUG=true
	    	VERBOSE=true
	    	LOUD=true
	    ;;
	  --help | -h | "-?")
	  		SHOWHELP=true
	  		METADATAONLY=true
	    ;;
	  --verbose | --v | -v | -V )
	    	DEBUG=false
	    	VERBOSE=true
	    	LOUD=true
	   ;;
	  --quiet | -q)
	    	LOUD=false
	    	DEBUG=false
	    	VERBOSE=false
	    ;;
	  --dry-run | -dry | --dry)
	    	DRYRUN=true
	    ;;
	esac
done

#find platform
MACOSX=false
WINDOWS=false
UNIX=false
system=`uname`
if [[  -d "/System/Library/Frameworks" ]] ; then
	MACOSX=true
elif [ -d "/WINDOWS" ] ; then
	WINDOWS=true
else
	UNIX=true
fi

#find the $scriptFile and importantly the $scriptDir
scriptFile="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
if [ -L "$scriptFile" ]; then
	scriptFile=`readlink -n $scriptFile`
fi
scriptName=${scriptFile##*/} # `basename $scriptFile` 
scriptDir=${scriptFile%/*} # `dirname $scriptFile`
workingDir=`pwd`
searchablePath=":$PATH:"

if [[ -z "$command" || "${command:0:1}" = "-" ]]; then
	echo
	sh $scriptFile help --help
	exit
fi

if $VERBOSE; then
	echo "name:$scriptName		file:$scriptFile	dir:$scriptDir	"
	echo "command:$command		working:$workingDir" 		
fi

source "$scriptDir/$scriptName.locations.sh"

for found in ${configlocations[@]}
do
	if [ -e "$found/.$scriptName.conf" ]; then
		if $VERBOSE; then
			echo "using configuration: $found/.$scriptName.conf"
		fi
		configFile="$found/.$scriptName.conf"
		source "$configFile"
		break
	fi
done

target="$scriptName.${command}*.cmd.sh"

previous="ok" 	
count=0
for loc in ${locations[@]}
do
	for found in $loc/$target
	do
		if [[ -e "$found" && "$found" != "$previous" ]]; then
			count=$((count + 1))	
			if $DEBUG; then
				echo "found #$count : $found"
			fi
			previous="$found"
		fi
	done
done

if [ $count -gt 1 ]; then
	if $LOUD; then
		echo "Warning: Command $command is ambiguous"
	fi
	exit
fi

for loc in ${locations[@]}
do
	for found in $loc/$target
	do
		if [ -e $found ]; then
			if $DEBUG; then
				echo "executing: $found"
			fi
			source "$found"
			exit
		fi
	done
done

if $LOUD; then
	echo "Warning: Command $command not found"
	exit 1
fi 

#"This Code is distributed subject to the MIT License, as in http://www.opensource.org/licenses/mit-license.php . 
#Any additional contribution submitted for incorporation into or for distribution with this file shall be presumed subject to the same license."